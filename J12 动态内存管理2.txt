////malloc开辟空间
//int main()
//{
//	//malloc(10*sizeof(int))
//	//初始化每个空间为0
//	int* p = (int*)calloc(10, sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d", *(p + i));
//		}
//	}
//	free(p);
//	p = NULL;
//
//
//	return 0;
//}



////realloc
////调整动态开辟内存空间的大小
//int main()
//{
//	//malloc(10*sizeof(int))
//	//初始化每个空间为0
//	int* p = (int*)calloc(10, sizeof(int));
//	if (p == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d", *(p + i));
//		}
//	}
//
//	//假设malloc开辟的空间不够，要添加空间
//	//用realloc调整
//	//realloc使用的注意事项
//	//1.如果P指向的空间之后有足够的空间可以追加，则直接追加，后返回P
//	//2.如果P指向的空间之后没有足够的空间可以追加，则realloc函数会重新找一个新的内存区域
//	//  开辟一块满足需求的空间，并且把原来内存中的数据拷贝回来，释放旧的内存空间
//    //  最后返回新开辟的内存空间
//	//3.得用一个新的变量来接受realloc函数的返回值
//
//	/*int* p2 = realloc(p, 40);*/
//	/*p = realloc(p, 4000);*/
//	int*ptr = realloc(p, INT_MAX);
//	if (ptr != NULL)
//	{
//		p = ptr;
//	}
//
//	int i = 0;
//	for (i = 5; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		/*printf("%d ", *(p2 + i));*/
//		printf("%d ", *(p + i));
//	}
//
//	free(p);
//	p = NULL;
//
//	return 0;
//}


////错误示范，对空指针进行解引用操作
////万一malloc失败了，P就被赋值为NULL
//int main()
//{
//	int* p = (int*)malloc(40);
//	*p = 0;
//
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	free(p);
//	p = NULL;
//
//	return 0;
//}


//错误示范：对动态开辟的内存的越界访问
int main()
{
	int* p = (int*)malloc(5 * sizeof(int));
	if (p == NULL)
	{
		return 0;
	}
	else
	{
		int i = 0;
		for (i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
	}
	free(p);
	p = NULL;

	return 0;
}