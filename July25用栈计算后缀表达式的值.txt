//用栈实现后缀表达式的计算

int calSub(float opand1, char op, float opand2, float& result)
{
	if (op == '+')result = opand1 + opand2;
	if (op == '-')result = opand1 - opand2;
	if (op == '*')result = opand1 * opand2;
	if (op == '/')
	{
		if (fabs(opand2) < MIN)//判断float是否接近0，如果接近0 就把它设为0，除数为0就不能计算
		{
			return 0;
		}
		else
		{
			result = opand1 / opand2;
		}
	}
	return 1;
}

float calPostFix(char exp[])
{
	float s[maxSize]; int top = -1;
	int i = 0;
	while (exp[i] != '\0')
	{
		if ('0' <= exp[i] && exp[i] <= '9')
			s[++top] = exp[i] - '0';
		else if (exp[i] == '+' ||
			exp[i] == '-' ||
			exp[i] == '*' ||
			exp[i] == '/')
		{
			float opnd1, opnd2, result;
			char op;
			int flag;
			opnd2 = s[top--];
			opnd1 = s[top--];
			op = exp[i];
			flag = calSub(opnd1, op, opnd2, result);
			if (flag == 0)
			{
				std::cout << "ERROR" << std::endl;//puts("ERROR");
				return 0;
			}
			s[++top] = result;
		}
		++i;
	}
	return s[top];
}