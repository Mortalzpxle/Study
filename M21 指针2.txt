int main()
{
	int arr[10] = { 0 };
	printf("%p\n", arr);//地址 - 首元素的地址
	printf("%p\n", &arr[0]);//
	printf("%p\n", &arr);//与上一个相同，但它表示的是整个数组

	//1.&arr - &数组名 - 数组名不是首元素的地址 - 数组名表示整个数组 - &数组名 取出的是整个数组的地址
	//2.sizeof(arr) - sizeof(数组名) - 数组名比表示的整个数组 - sizeof（数组名）计算的是整个数组的大小
	return 0;
 }




//strlen - 求字符串长度
//用指针模拟实现strlen ，之前有过计数器的方式1，递归的方式2.
int my_strlen(char* str)
{
	char* start = str;
	char* end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}
int main()
{
	char arr[] = "bit";

	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}



int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	printf("%d\n", &arr[9] - &arr[0]);//指针的运算,同一个空间的指针相互运算
	return 0;
}





//指针运算
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//int* p = arr;
	//for (i = 0; i < sz; i++)
	//{
	//	printf("%d", *p);
	//	p++;
	//}
	//for (i = 0; i < 5; i++)
	//{
	//	printf("%d ", *p);
	//	p+=2;
	//}
	int* p = &arr[9];
	for (i = 0; i < sz; i++)
	{
		printf("%d", *p);
		p-=2;
	}
	return 0;
}



//指针使用前检查有效性
int main()
{
	int a = 10;
	int* pa = &a;
	*pa = 20;
	//
	pa = NULL;
	if (pa != NULL)
	{
		*pa = 10;
	}
	return 0;
}


//指针初始化
int main()
{
	int b = 0;
	int a = 10;
	int* p = &a;//初始化
	int* p = NULL;//NULL - 用来初始化指针的，给指针赋值
	return 0;
}



//错误的示范
//出现野指针
int* test()
{
	int a = 10;
	return &a;
}
int main()
{
	int* p = test();
	printf("%d\n", *p);
	return 0;
}