//第一种
void my_strcpy(char* dest, char* src)
{
	while (*src !='\0')
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = *src;// \0
}
//第二种
void my_strcpy(char* dest, char* src)
{
	while (*dest++ = *src++)// \0的阿斯玛值为0，也能同时停止
	{
		;
	}
}
//第三种
void my_strcpy(char* dest, char* src)
{
	if (dest != NULL && src != NULL)
	{
		while (*dest++ = *src++)// \0的阿斯玛值为0，也能同时停止
		{
			;  
		}
	}
}
//第四种
#include<assert.h>
void my_strcpy(char* dest, char* src)
{
	assert(dest != NULL);//断言
	assert(src != NULL);//断言
		while (*dest++ = *src++)// \0的阿斯玛值为0，也能同时停止
		{
			;
		}
}
//第五种
#include<assert.h>
void my_strcpy(char* dest, const char* src)
{
	assert(dest != NULL);//断言
	assert(src != NULL);//断言
	while (*dest++ = *src++)// \0的阿斯玛值为0，也能同时停止
	{
		;
	}
}
 int main()
{
//strcpy
//字符串拷贝
char arr1[] = "############";
char arr2[] = "bit";
//strcpy(arr1, arr2);
my_strcpy(arr1, arr2);
printf("%s\n", arr1);

return 0;
}
//第六种
#include<assert.h>
char* my_strcpy(char* dest, const char* src)
{
	char* ret = dest;
	assert(dest != NULL);//断言
	assert(src != NULL);//断言
	//把src指向的字符串拷贝到dest指向的空间，包含'\0'字符
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	//strcpy
	//字符串拷贝
	char arr1[] = "############";
	char arr2[] = "bit";
	//strcpy(arr1, arr2);
	//my_strcpy(arr1, arr2);
	printf("%s\n", my_strcpy(arr1, arr2));
	
	return 0;
}




int main()
{
	const int num = 10;

	const int* p = &num;
	// const 放在指针变量的*左边时，修饰的事*p,不能通过*来改变*p(num)的值
	// const 放在指针变量的*右边时，修饰的是指针变量p本身，p不能被改变了
	int* const p = &num;

	return 0;
}