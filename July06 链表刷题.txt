//OJ题  
//1.接口型： 直接实现函数，不需要写main函数等等去调用，不需要加头文件

//2.IO型：需要自己写头文件，实现算法逻辑，写main函数，也就是写完整函的程序

//给你单链表的头节点 head ，请你反转链表，并返回反转后的链表 1->2->3 反转 3->2->1

//思路一：翻指针

struct ListNode* reverseLsit(struct ListNode* head)
{
	if (head == NULL)
	{
		return NULL;
	}
	//初始条件
	struct ListNode* n1 = NULL, *n2 = head, *n3 = n2->next;
	//结束条件
	while (n2)
	{
		//迭代过程
		n2->next = n1;

		n1 = n2;
		n2 = n3;
		if (n3)
			n3 = n3->next;
		
	}

	return n1;
}


//思路二：头插法  取原链表的节点，头插到新链表
struct ListNode* reverseLsit(struct ListNode* head)
{
	struct ListNode* cur = head;
	struct ListNode* newHead = NULL;
	while (cur)
	{
		struct ListNode* next = cur->next;

		//头插
		cur->next = newHead;
		newHead = cur;
		cur = next;
	}
	return newHead;
}


//给定一个头结点为 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。

//示例 1：
//输入：[1, 2, 3, 4, 5]
//输出：此列表中的结点 3 (序列化形式：[3, 4, 5])
//返回的结点值为 3 。(测评系统对该结点序列化表述是[3, 4, 5])。
//注意，我们返回了一个 ListNode 类型的对象 ans，这样：
//ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.


//示例 2：
//输入：[1, 2, 3, 4, 5, 6]
//输出：此列表中的结点 4 (序列化形式：[4, 5, 6])
//由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。

//提示：
//给定链表的结点数介于 1 和 100 之间。


//思路一：快慢指针

struct ListNode* middleNode(struct ListNode* head) 
{
	struct ListNode* slow = head, * fast = head;
	while (fast && fast->next)
	{
		slow = slow->next;
		fast = fast->next->fast;

	}
	return slow;
}
