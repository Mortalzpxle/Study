//有一个非递减非空单链表，设计一个算法删除值域重复的结点。例如｛1,1,2,3,4,4,7,7,7,9,9,9｝
//经过删除后变成了｛1,2,3,4,7,9｝

typedef struct LNode
{
    int data;
    struct LNode* next;

}LNode;

void del(LNode* L)
{
    assert(L);
    LNode* p = L->next, * q;
    while (p->next != NULL)
    {
        if (p->data == p->next->data)
        {
            q = p->next;
            p->next = q->next;
            free(q);
        }
        else
        {
            p = p->next;
        }
    }
}

void createList(LNode *&head, int arr[], int n)
{
    head = (LNode*)malloc(sizeof(LNode));
    head->next = NULL;
    if (head == NULL)
    {
        cout << "内存分配不成功";
    }
    else
    {
        LNode* r = head;
        for (int i = 0; i < n; ++i)
        {
            LNode* p = (LNode*)malloc(sizeof(LNode));
            p->data = arr[i];
            p->next = NULL;
            r->next = p;
            r = p;
        }
    }
}

void printList(LNode* L)
{
    assert(L);
    LNode* p;
    p = L->next;
    while (p!= NULL)
    {
        cout << p->data << " ";
        p = p->next;
    }
    cout << endl;
}

int main()
{
    int a[] = { 1,2,2,2,3,3,3,4,4,5,5,6,6,7 };
    LNode* A;
    createList(A, a, 14);
    del(A);
    printList(A);
    return 0;
}