int main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	max = (a > b ? a : b);//条件操作符
	printf("max = %d", max);
	return 0;
}

int main()
{
	//真 - 非0
	//假 - 0
	//&& - 逻辑与   两个为真即为真
	//|| - 逻辑或   有一个为真即为真
	int a = 0;
	int b = 5;
	//int c = a && b;两个都是假才是假
	int c = a || b;
	printf("%d\n", c);
	return 0;
}


int main()
{
	double a = 3.14;
	//int a = (int)3.14;//强制传唤类型（类型）
	return 0;
}

int main()
{
	int a = 10;
	//  int b = a++;//后置++，先使用a,再++ 打印出来a=11 b=10  --相同道理
	int b = ++a;//前置++，先++，再使用，打印出来a=11 b=11
	printf("a = %d b = %d", a, b);
	return 0;
}


int main()
{
	int a = 0;//4个字节，32bit位
	int b = ~a;//b是有符号的整形，
	//~---按（2进制）位取反
	//0000000000000000000000000
	//1111111111111111111111111
	//原码、反码、补码
	//负数最喜爱内存中存储的时候，存储的是二进制的补码
 正数--原码，反码，补码，相同
 负数--
 原码：直接按照正负写出的二进制序列
 反码：原码的符号位不变，其他位按位取反
 补码：反码加1
举例：-2
 10000000000000000000000010--原码
 11111111111111111111111101--反码
 11111111111111111111111110--补码
	//11111111111111111111111  这是补码
	//11111111111111111111110  补码减1 就是反码   
	//10000000000000000000001  最高位不变，其他全部取反，得到原码 
	printf("%d\n", b);//使用的，打印的是这个数的原码
	return 0;
 二进制中规定最高位为符号位，
 [1][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]代表负数
 [0][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]代表正数
}

int main()
{
	int a = 10;
	int arr[] = { 1,2,3,4,5 };
	printf("%d\n", sizeof(a));//4  sizeof 计算数组大小，单位是字节
	printf("%d\n", sizeof(int));//4
	printf("%d\n", sizeof(arr));//4*5=20
	printf("%d\n", sizeof a);//4
	printf("%d\n", sizeof(arr) / sizeof(arr[0]));//计算数组的个数
	return 0;
}