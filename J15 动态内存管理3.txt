#include"Add.h"
#include<stdlib.h>
#include<errno.h>
#include<stdio.h>
#include<Windows.h>




//int main()
//{
//	//int* p = (int*)malloc(40);
//	//if (p == NULL)
//	//{
//	//	return 0;
//	//}
//	//int* p2 = realloc(p, 80);
//	//if (p2 != NULL)
//	//{
//	//	p = p2;
//	//}
//	// 
//	////利用realloc也可以开辟新的空间
//	int* p = realloc(NULL, 40);//malloc(40)
//	return 0;
//
//}




////动态内存开辟常见错误
//int main()
//{
//	////1.对NULL指针引用操作
//	//int* p = malloc(40);
//	////对P进行相关判断
//	//*p = 10;//malloc开辟空间失败 - 对NULL指针解引用
//
// 
//
//	////2.对动态开辟内存的越界访问
//	//int* p = (int*)malloc(40);//10个Int 下标0-9
//	//if (p == NULL)
//	//{
//	//	return 0;
//	//}
//	//int i = 0;
//	////越界
//	//for (i = 0; i <= 10; i++)//i 是下标 这里应该是 < 10 或者 <=9
//	//{
//	//	*(p + i) = i;
//	//}
//
// 
//
//	////3.对非动态开辟内存使用free释放
//	//int a = 10;
//	//int* p = &a;
//	////..........
//	////对非动态内存使用free释放
//	//free(p);
//	//p = NULL;
//
//
// 
//	////4.使用free释放动态开辟内存的一部分
//	//int* p = (int*)malloc(40);
//	//if (p == NULL)
//	//{
//	//	return 0;
//	//}
//	//int i = 0;
//	//for (i = 0; i < 10; i++)
//	//{
//	//	*p++ = i;
//	//}
//	////回收空间
//	////使用free释放动态开辟内存的一部分，p已经不再指向首元素地址了
//	//free(p);
//	//p = NULL;
//
// 
//
//	//5.对同一块动态内存的多次释放
//	int* p = (int*)malloc(40);
//	if (p == NULL)
//	{
//		return 0;
//	}
//	//使用
//	//释放
//	free(p);
//	//......
//	free(p);//避免方法 P = NULL;
//
// 
//
//	//6.动态开辟内存忘记释放（内存泄漏）
//	while (1)
//	{
//		malloc(1);
//	}
//	//如果不free 就一直增加占用的内存
//
//
//	return 0;
//}
